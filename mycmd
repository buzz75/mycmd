#!/usr/bin/python

## @package mycmd
#  easy to use my project
#
#  @author Holiday Hao <codediablos@gmail.com>
#  @version


import os
import sys
import optparse
import ConfigParser

class MYCMD:
    DEBUG_LEVEL = 0

    EDITOR = 'vi'
    HOME_DIR = os.environ['HOME']
    config_file = HOME_DIR + '/.mycmd_conf'
    patition_table_file = HOME_DIR + '/mycmd/.patition_table_conf'

    MSG_USAGE = "mycmd[ --config]"

    config = ConfigParser.SafeConfigParser()
    patition_table = ConfigParser.SafeConfigParser()

    correct_platforms = ['t20', 't30', 't40', 'a9']
    nv_patitions = ['boot', 'bootloader', 'recovery', 'system', 'flexrom']
    qcom_patitions = ['aboot', 'boot', 'recovery', 'system', 'cache', 'userdata', 'tombstones', 'persist', 'modem']

    def __init__(self, argv):
        self.config.read(self.config_file)
        self.patition_table.read(self.patition_table_file)

        self.parser = optparse.OptionParser(self.MSG_USAGE)
        self.parser.add_option('--debug', '-g', action='store_true', dest='debug', help="for debug",default=False)
        self.parser.add_option('--config', action='store_true', dest='config', help="setting config file", default=False)
        self.options, self.args = self.parser.parse_args(argv)

    def go(self, param):
        project_home = ''
        project_dir = ''
        project_sub_dir = self.sub_dir(param[0], param[1])

        if self.config.has_option('core', 'project_home'):
            project_home = self.config.get('core', 'project_home')

        if self.config.has_option('project', param[0]):
            project_dir = self.config.get('project', param[0])

        if project_dir == '':
            if project_sub_dir == '':
                result = project_home
            else:
                result = project_sub_dir
        else:
            result = project_home + "/" + project_dir + "/" + project_sub_dir

        print result

    def sub_dir(self, project_name, sub_name):
        sub = ''
	#ex. go test
        if self.config.has_option('subdir', project_name):
            sub = self.config.get('subdir', project_name)
	#ex. go pm mach
        elif self.config.has_section(sub_name + '_dir'):
            prefix = ''
            if self.config.has_option(sub_name + '_dir', 'prefix'):
                prefix = self.config.get(sub_name + '_dir', 'prefix') + "/"

            if self.config.has_option(sub_name + '_dir', project_name):
                sub = prefix + self.config.get(sub_name + '_dir', project_name)
            elif self.config.has_option(sub_name + '_dir', 'default'):
                sub = prefix + self.config.get(sub_name + '_dir', 'default')
            else:
                sub = ''
	#ex. go pm i2c
        elif self.config.has_option('subdir', sub_name):
            sub = self.config.get('subdir', sub_name)
        else:
            sub = ''

        return sub

    def go_completion(self, param):
        if(param[0] == 'subdir'):
            for k, v in self.config.items('subdir'):
                print k
            for section in self.config.sections():
                if not section.find('_dir') == -1:
                    print section.replace('_dir', '')
        else:
            for k, v in self.config.items('project'):
                print k

    def is_qcom_patition(self, part):
        for patition in self.qcom_patitions:
            if part == patition:
                return True
        return False

    def is_nv_patition(self, part):
        for patition in self.nv_patitions:
            if part == patition:
                return True
        return False

    def is_platfrom(self, plat):
        for platform in self.correct_platforms:
            if plat == platform:
                return True
        return False

    def flash_cmd(self, cmd, is_fused):
        result = ''
        cmd_type = 'flash'
        platform = cmd[0]
        patition = cmd[1]
        sbk = cmd[2]

        # get command
        if self.patition_table.get(platform, 'platform') == 'qcom':
            cmd_type += '_qcom'
            if patition == 'modem':
                cmd_type += '_modem'
        else:
            cmd_type += '_nv'

        if is_fused:
            cmd_type += '_fused'

        if not self.is_nv_patition(patition) and not self.is_qcom_patition(patition):
            cmd_type += '_all'
            sbk = cmd[1]

        result = self.patition_table.get('core', cmd_type)

        # replace variable
        if is_fused:
            result = result.replace("$sbk", self.config.get('fused', sbk))

        # check nvflash is exist
        nvflash_location = self.patition_table.get('core', 'nvflash_location')
        if not os.path.isfile(nvflash_location + '/nvflash'):
            nvflash_location = '.'
        result = result.replace("$nvflash_location", nvflash_location)

        if self.is_nv_patition(patition) and self.patition_table.get(platform, 'platform') == 'nv':
            result = result.replace("$target_id", self.patition_table.get(platform, patition))
            if patition == 'bootloader':
                result = result.replace("$target_file", patition + "_enc.bin")
            else:
                result = result.replace("$target_file", patition + ".img")

        if self.is_qcom_patition(patition) and self.patition_table.get(platform, 'platform') == 'qcom':
            if patition == 'modem':
                pass
            elif patition == 'aboot':
                result = result.replace("$patition_img", "emmc_appsboot.mbn")
            else:
                result = result.replace("$patition_img", self.patition_table.get(platform, patition))
            result = result.replace("$patition", patition)

        for k, v in self.patition_table.items(platform):
            # result.replace('$odmdata', self.patition_table.get(patition, 'odmdata'))
            result = result.replace("$" + k + " ", v + " ")

        return result

    def flash(self, params):
        cmd = ''
        platform = params[0]
        if self.check_fused(params):
            cmd = self.flash_cmd(params, True)
        else:
            cmd = self.flash_cmd(params, False)

        for line in cmd.split("$$ "):
            print line
            self.excute_cmd(line, 1)

        if(self.patition_table.get(platform, 'platform') == 'qcom'):
            input = raw_input("Do you want to reboot? (Y/n): ")
            if not input == 'N' and not input == 'n':
                self.excute_cmd("fastboot reboot", 1)

    def flash_completion(self, param):
        if param[0] == 'flash':
            for platform in self.correct_platforms:
                print platform
        elif param[0] == 'a9':
            for patition in self.qcom_patitions:
                print patition
        elif param[0] == 't20' or param[0] == 't30' or param[0] == 't40':
            for k, v in self.config.items('fused'):
                print k
            for patition in self.nv_patitions:
                print patition
        elif self.is_nv_patition(param[0]):
            for k, v in self.config.items('fused'):
                print k

    def check_fused(self, params):
        last_input = 0
        x = range(len(params))
        x.reverse()
        for i in x:
            if not params[i] == '' and not params[i] == ' ':
                last_input = i
                break

        if self.is_platfrom(params[last_input]) or \
                self.is_nv_patition(params[last_input]) or \
                self.is_qcom_patition(params[last_input]):
            return False

        return True;

    def install(self, param):
        print self.config.get('install', param[0])

    def install_completion(self, param):
        for k, v in self.config.items('install'):
            print k

    def configure(self):
        self.open_editor(self.config_file)

    def open_editor(self, edit_file):
        try:
            self.EDITOR = os.environ['EDITOR']
        except:
            pass

        self.excute_cmd(self.EDITOR + " " + edit_file, 3)

    def excute_cmd(self, cmd, level):
        if self.DEBUG_LEVEL < level:
            os.system(cmd)
        else:
            print cmd

    def enable_debug(self, level):
        self.DEBUG_LEVEL = level


def main():
    command = sys.argv[1]
    mycmd = MYCMD(sys.argv[2:])

    if mycmd.options.debug:
        mycmd.enable_debug(1)

    if mycmd.options.config:
        mycmd.configure()
        return

    reval = {
        'go': lambda x: mycmd.go(x),
        'go_completion': lambda x: mycmd.go_completion(x),
        'install': lambda x: mycmd.install(x),
        'install_completion': lambda x: mycmd.install_completion(x),
        'flash': lambda x: mycmd.flash(x),
        'flash_completion': lambda x: mycmd.flash_completion(x),
        }[command](mycmd.args)

if __name__ == '__main__':
    main()
